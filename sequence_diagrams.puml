

@startuml Manage CoWork (GET ALL)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (GET ALL)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase


client->server ++: req.get('/api/v1/coworks')
server->routerCoWorks ++: app.use('/api/v1/coworks', coworks)
routerCoWorks -> controllersCoWorks ++: getCoWorks()
controllersCoWorks->modelCoWork ++: find()
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.find()
CoWorksDatabase --> modelCoWork --: coWorks[]
controllersCoWorks <-- modelCoWork --: coWorks[]
controllersCoWorks->client --:res.status(200).json({success:true, count:coWorks.length, data:coWorks})

@enduml


@startuml Manage CoWork (GET SINGLE)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (GET SINGLE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.get('/api/v1/coworks/:id')
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: getCoWork()
controllersCoWorks->modelCoWork ++: findById(req.params.id)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findById(_id)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(200).json({success:true, data:coWork})
@enduml


@startuml Manage CoWork (POST)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.post('/api/v1/coworks', req.body)
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: postCoWorks()
controllersCoWorks->modelCoWork ++: create(req.body)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.create(body)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(201).json({success:true, data:coWork})
@enduml

@startuml Manage CoWork (PUT)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.put('/api/v1/coworks/:id', req.body)
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: putCoWork(req.params.id, req.body)
controllersCoWorks->modelCoWork ++: findByIdAndUpdate(req.params.id, req.body)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findByIdAndUpdate(_id, body)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(200).json({success:true, data:coWork})
@enduml

@startuml Manage CoWork (DELETE)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.delete('/api/v1/coworks/:id')
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: deleteCoWork(req.params.id)
controllersCoWorks->modelCoWork ++: findByIdAndDelete(req.params.id)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findByIdAndDelete(_id)
CoWorksDatabase --> modelCoWork --: {}
controllersCoWorks <-- modelCoWork --: {}
controllersCoWorks->client --:res.status(200).json({success:true, data:{}})
@enduml

---------------
' reservation


@startuml Get All Reservations

header CoWork Reservations API Sequence Diagram
footer Page %page% of %lastpage%
title "Reservations (GET ALL)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server: req.get('/api/v1/reservations')
server->routerReservations: app.use('/api/v1/reservations', reservationsRouter)
routerReservations -> controllersReservations: getReservations()
controllersReservations->modelReservation: Reservation.find({...})
modelReservation ->ReservationsDatabase: fetchReservations
ReservationsDatabase --> modelReservation: reservations
controllersReservations --> client: res.status(200).json({success:true, count:reservations.length, data:reservations})

@enduml


@startuml Get Single Reservation

header CoWork Reservations API Sequence Diagram
footer Page %page% of %lastpage%
title "Reservation (GET SINGLE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server: req.get('/api/v1/reservations/:id')
server->routerReservations: app.use('/api/v1/reservations', reservationsRouter)
routerReservations -> controllersReservations: getReservation()
controllersReservations->modelReservation: Reservation.findById(req.params.id).populate('cowork')
modelReservation ->ReservationsDatabase: fetchReservationById
ReservationsDatabase --> modelReservation: reservationDetails
controllersReservations --> client: res.status(200).json({success:true, data:reservationDetails})

@enduml


@startuml Add Reservation Advanced

header CoWork Reservations API Sequence Diagram
footer Page %page% of %lastpage%
title "Add Reservation (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:CoWork" as modelCoWork
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server: req.post('/api/v1/coworks/:coworkId/reservations', req.body)
server->routerReservations: app.use('/api/v1/coworks/:coworkId/reservations', reservationsRouter)
routerReservations -> controllersReservations: addReservation()

controllersReservations->modelCoWork: CoWork.findById(req.params.coworkId)
modelCoWork ->CoWorksDatabase: queryCoWorkById
CoWorksDatabase --> modelCoWork: coWorkExists?

alt coWork Exists
    modelCoWork --> controllersReservations: Yes

    controllersReservations->modelReservation: Reservation.find({user: req.user.id})
    modelReservation ->ReservationsDatabase: queryUserReservations
    ReservationsDatabase --> modelReservation: reservationCount

    alt reservationCount < 3 or user is admin
        modelReservation --> controllersReservations: Allow Creation

        controllersReservations->modelReservation: Reservation.create(req.body)
        modelReservation ->ReservationsDatabase: createReservation
        ReservationsDatabase --> modelReservation: reservationCreated
        modelReservation --> controllersReservations: reservation
        controllersReservations --> client: res.status(200).json({success:true, data:reservation})
    end
end

@enduml


@startuml Update Reservation

header CoWork Reservations API Sequence Diagram
footer Page %page% of %lastpage%
title "Update Reservation (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server: req.put('/api/v1/reservations/:id')
server->routerReservations: app.use('/api/v1/reservations', reservationsRouter)
routerReservations -> controllersReservations: updateReservation()
controllersReservations->modelReservation: Reservation.findByIdAndUpdate(req.params.id, req.body)
modelReservation ->ReservationsDatabase: updateReservation
ReservationsDatabase --> modelReservation: updatedReservation
controllersReservations --> client: res.status(200).json({success:true, data:updatedReservation
@enduml


@startuml Delete Reservation

header CoWork Reservations API Sequence Diagram
footer Page %page% of %lastpage%
title "Reservation (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:reservations" as routerReservations
participant "<<controllers>>\n:reservations" as controllersReservations
participant "<<model>>\n:Reservation" as modelReservation
database "<<MongoDB>>\n:reservations" as ReservationsDatabase

client->server: req.delete('/api/v1/reservations/:id')
server->routerReservations: app.use('/api/v1/reservations', reservationsRouter)
routerReservations -> controllersReservations: deleteReservation()

controllersReservations->modelReservation: Reservation.findById(req.params.id)
modelReservation ->ReservationsDatabase: queryReservationById
ReservationsDatabase --> modelReservation: reservationDetails

modelReservation ->ReservationsDatabase: deleteReservationById
ReservationsDatabase --> modelReservation: deletionSuccess

modelReservation --> controllersReservations: successMessage
controllersReservations --> client: res.status(200).json({success:true, data:{}})

@enduml



