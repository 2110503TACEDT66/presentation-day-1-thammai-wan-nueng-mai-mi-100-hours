

@startuml Manage CoWork (GET ALL)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (GET ALL)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase


client->server ++: req.get('/api/v1/coworks')
server->routerCoWorks ++: app.use('/api/v1/coworks', coworks)
routerCoWorks -> controllersCoWorks ++: getCoWorks()
controllersCoWorks->modelCoWork ++: find()
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.find()
CoWorksDatabase --> modelCoWork --: coWorks[]
controllersCoWorks <-- modelCoWork --: coWorks[]
controllersCoWorks->client --:res.status(200).json({success:true, count:coWorks.length, data:coWorks})

@enduml


@startuml Manage CoWork (GET SINGLE)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (GET SINGLE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.get('/api/v1/coworks/:id')
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: getCoWork()
controllersCoWorks->modelCoWork ++: findById(req.params.id)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findById(_id)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(200).json({success:true, data:coWork})
@enduml


@startuml Manage CoWork (POST)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.post('/api/v1/coworks', req.body)
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: postCoWorks()
controllersCoWorks->modelCoWork ++: create(req.body)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.create(body)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(201).json({success:true, data:coWork})
@enduml

@startuml Manage CoWork (PUT)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.put('/api/v1/coworks/:id', req.body)
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: putCoWork(req.params.id, req.body)
controllersCoWorks->modelCoWork ++: findByIdAndUpdate(req.params.id, req.body)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findByIdAndUpdate(_id, body)
CoWorksDatabase --> modelCoWork --: coWork
controllersCoWorks <-- modelCoWork --: coWork
controllersCoWorks->client --:res.status(200).json({success:true, data:coWork})
@enduml

@startuml Manage CoWork (DELETE)

header CoWork Sequence Diagram
footer Page %page% of %lastpage%
title "Manage Cowork (DELETE)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:coworks" as routerCoWorks
participant "<<controllers>>\n:coworks" as controllersCoWorks
participant "<<models>>\n:CoWork" as modelCoWork
database "<<MongoDB>>\n:coworks" as CoWorksDatabase
client->server ++: req.delete('/api/v1/coworks/:id')
server->routerCoWorks ++: app.use('/api/v1/coworks', coWorksRouter)
routerCoWorks -> controllersCoWorks ++: deleteCoWork(req.params.id)
controllersCoWorks->modelCoWork ++: findByIdAndDelete(req.params.id)
modelCoWork ->CoWorksDatabase ++: CoWorkSchema.findByIdAndDelete(_id)
CoWorksDatabase --> modelCoWork --: {}
controllersCoWorks <-- modelCoWork --: {}
controllersCoWorks->client --:res.status(200).json({success:true, data:{}})
@enduml

